#!/bin/bash

# config
#-------------------------------------------------------------------------------

if [[ -z $XDG_CONFIG_HOME ]]; then
	# for mac os
	XDG_CONFIG_HOME="$HOME/.config"
fi

if [[ -z $EDITOR ]]; then
	EDITOR="vi"
fi

g_rctl="$(basename "$0")"
g_main_rctl="$XDG_CONFIG_HOME/rctl"
g_main_config="$g_main_rctl/rctl.env" # global config
g_main_commands_dir="$g_main_rctl/commands" # global custom commands
g_main_hooks_dir="$g_main_rctl/hooks" # global hooks

g_project_rctl=".rctl"
g_project_rctl_gitignore_grep="^/\.rctl(\$|/)"
g_project_rctl_gitignore=( \
	"/.rctl/parameters.env" \
	"/.rctl/commands/*.local.bash" \
	"/.rctl/hooks/*.local.bash" \
)
g_project_config="$g_project_rctl/config.env"
g_project_parameters="$g_project_rctl/parameters.env"
g_project_commands_dir="$g_project_rctl/commands"
g_project_hooks_dir="$g_project_rctl/hooks"
g_project_root_hints=($g_project_config)
g_initializable_root_hints=(".git")

g_rsync_opts="--recursive --executability --copy-links --delete -zz"


# library
#-------------------------------------------------------------------------------

OK=0
ERR=1

err_not_project="not in an project (use \`$g_rctl init\` to initialize)"
err_not_initializable="not in an initializable project (requires ${g_initializable_root_hints[@]})"

# no operation
_() {
	echo -n
}

throw() {
	local mesg="$1"
	echo "error: $mesg" >&2
	exit $ERR
}

info() {
	local mesg="$1"
	#echo -e "\e[94m* ${mesg}\e[0m"
}

detect_root() {
	local hints=("$@")
	local path="$PWD"

	for hint in "${hints[@]}"; do
		if [[ -e "$path/$hint" ]]; then
			return $OK
		fi
	done

	return $ERR
}

find_root() {
	local hints=("$@")
	local path="$PWD"
	local parent=""

	(
		cd "$path"

		while true; do
			if detect_root "${hints[@]}"; then
				echo "$PWD"
				return $OK
			fi

			if [[ $PWD == $parent ]]; then
				return $ERR
			fi

			parent="$PWD"
			cd ..
		done
	)
}

find_project_root() {
	find_root "${g_project_root_hints[@]}"
}

find_initializable_root() {
	find_root "${g_initializable_root_hints[@]}"
}

in_project() {
	find_project_root >/dev/null
}

in_initializable_project() {
	find_initializable_root >/dev/null
}

list_commands() {
	local basedir="$1"

	ls -1 "$basedir" | sed 's/\.bash//' | while read cmd; do
		if [[ ! $cmd =~ ^[_.] ]]; then
			echo "$cmd"
		fi
	done
}

run_global_hook_if_exists() {
	local when="$1"
	local command="$2"

	if [[ $when != "before" && $when != "after" ]]; then
		throw "[fatal] hook moments must be before or after"
	fi

	if [[ -z $command ]]; then
		throw "[fatal] command parameter is required"
	fi

	hook="$g_main_hooks_dir/${command}.${when}.bash"

	if [[ -f $hook ]]; then
		info "running global hook: $when $command"
		source "$hook"
	fi
}

run_project_hook_if_exists() {
	local when="$1"
	local command="$2"

	if [[ $when != "before" && $when != "after" ]]; then
		throw "[fatal] hook moments must be before or after"
	fi

	if [[ -z $command ]]; then
		throw "[fatal] command parameter is required"
	fi

	local project="$(find_project_root)"

	if [[ -n $project ]]; then
		hook="$project/$g_project_hooks_dir/${command}.${when}.bash"

		if [[ -f $hook ]]; then
			info "running project hook: $when $command"
			source "$hook"
		fi
	fi
}

edit() {
	local file="$1"

	(
		source "$g_main_config"
		"$editor" "$file"
	)
}

project_list_targets() {
	if ! in_project; then
		throw "$err_not_project"
	fi

	(
		source "$(find_project_root)/$g_project_config"

		for target in "${targets[@]}"; do
			echo "$target"
		done
	)
}

project_has_target() {
	local target="$1"
	local project_target

	for project_target in $(project_list_targets); do
		if [[ $project_target == $target ]]; then
			return $OK
		fi
	done

	return $ERR
}

usage() {
	local command="$1"
	local project="$(find_project_root)"
	local project_commands=""
	local main_commands="$(list_commands "$g_main_commands_dir")"

	if in_project; then
		project_commands="$(list_commands "$project/$g_project_commands_dir")"
	fi

	if [[ -n $command ]]; then
		if in_project; then
			for test_cmd in $project_commands; do
				if [[ $test_cmd == $command ]]; then
					project="$(find_project_root)"
					project_rctl="$project/$g_project_rctl"
					command_file="$project/$g_project_commands_dir/${command}.bash"
					echo -n "rctl ${command} "
					source "$(find_project_root)/$g_project_config"
					source "$command_file"
					command_usage "$@"
					exit $?
				fi
			done
		fi

		for test_cmd in $main_commands; do
			if [[ $test_cmd == $command ]]; then
				command_file="$g_main_commands_dir/${command}.bash"
				echo -n "rctl ${command} "
				source "$command_file"
				command_usage "$@"
				exit $?
			fi
		done

		throw "invalid command"
	fi

	echo "rctl: remote control for your projects"
	echo
	echo "usage: rctl <command> [<args...>]"
	echo
	echo "built-in commands:"
	echo
	if ! in_project && in_initializable_project; then
		echo "    init"
		echo "        initialize rctl in a git project (in the current working directory)"
	fi
	if in_project; then
		echo "    ssh <target>"
		echo "        ssh to target"
		echo
		echo "    push <target>"
		echo "        deploy current project to the target"
		echo
		echo "    .config"
		echo "        edit project configuration"
		echo
		echo "    .param"
		echo "        edit project parameters"
		echo
		echo "    .edit-command <command>"
		echo "        edit a custom project command"
		echo
		echo "    .edit-hook {before|after} <command>"
		echo "        edit (or create) a hook {pre|post}-<command>"
		echo
	fi
	echo "    .help [<custom_command>]"
	echo "        print this help (or help about the specified custom command)"

	if [[ -n $project_commands ]]; then
		echo
		echo "project-specific commands:"
		echo
		for command in $project_commands; do
			project="$(find_project_root)"
			project_rctl="$project/$g_project_rctl"
			command_file="$project/$g_project_commands_dir/${command}.bash"
			source "$(find_project_root)/$g_project_config"
			source "$command_file"
			echo "    $command $(command_usage "$@" | perl -pe 's/^/    /g' | sed '1s/^    //')"
			echo
		done
	fi

	if [[ -n $main_commands ]]; then
		echo
		echo "global custom commands:"
		echo
		for command in $main_commands; do
			command_file="$g_main_commands_dir/${command}.bash"
			source "$command_file"
			echo "    $command $(command_usage "$@" | perl -pe 's/^/    /g' | sed '1s/^    //')"
			echo
		done
	fi

	echo "edit your global config in: $g_main_rctl"
}

rctl_setup() {
	if [[ ! -d $g_main_rctl ]]; then
		mkdir -p "$g_main_rctl"
		touch "$g_main_config"
		mkdir "$g_main_commands_dir"
		mkdir "$g_main_hooks_dir"

		(
			echo "editor=\"$EDITOR\""
			echo
			echo "# note: keep the quotes"
			echo "default_sync_include='(*)'"
			echo "default_sync_exclude='()'"
			echo "default_target=\"live\""
			echo "default_target_host='\"\"'"
			echo "default_target_user='\"\"'"
			echo "default_target_dir='\"\"'"
		) >> "$g_main_config"
	fi

	if [[ ! -f $g_main_config ]]; then
		throw "invalid configuration directory: $g_main_rctl"
	fi
}


# commands
#-------------------------------------------------------------------------------

project_init() {
	local project

	if ! in_initializable_project; then
		throw "$err_not_initializable"
	fi

	if in_project; then
		throw "this project has already been initialized"
	fi

	project="$(find_initializable_root)"

	local project_rctl="$project/$g_project_rctl"
	local project_gitignore="$project/.gitignore"

	local project_config="$project/$g_project_config"
	local project_parameters="$project/$g_project_parameters"
	local project_commands_dir="$project/$g_project_commands_dir"
	local project_hooks_dir="$project/$g_project_hooks_dir"

	[[ -d $project_rctl ]] || mkdir -p "$project_rctl"

	if [[ ! -f $project_gitignore ]] || ! grep -E "$g_project_rctl_gitignore_grep" "$project_gitignore" >/dev/null; then
		for line in "${g_project_rctl_gitignore[@]}"; do
			echo "$line" >> "$project_gitignore"
		done
	fi

	[[ -d $project_commands_dir ]] || mkdir "$project_commands_dir"
	[[ -d $project_hooks_dir ]] || mkdir "$project_hooks_dir"

	if [[ ! -f $project_config ]]; then
		touch "$project_config"

		(
			source "$g_main_config"

			(
				echo "# rctl: project configuration"
				echo
				echo "# Include local parameters (that shouldn't be version-controlled)"
				echo "#"
				echo "source \"$project_rctl/parameters.env\""
				echo
				echo
				echo "# Files to include and exclude in the synchronization using 'push' (space-separated)."
				echo "#"
				echo "# SYNTAX"
				echo "#     - \`\"dist\"\` will send the 'dist' directory (with its content)"
				echo "#     - \`\"dist/*\"\` will send only the content of 'dist' (not the directory itself)"
				echo "#"
				echo "# EXCLUDING"
				echo "#     - you target REMOTE files/directories, not local"
				echo "#     - e.g. \`\"dist/*.cache\"\` will only work if you included 'dist' itself"
				echo "#"
				echo "sync_include=$default_sync_include"
				echo "sync_exclude=$default_sync_exclude"
			) >> "$project_config"
		)
	fi

	if [[ ! -f $project_parameters ]]; then
		touch "$project_parameters"

		(
			source "$g_main_config"

			(
				echo "# rctl: project local parameters"
				echo
				echo
				echo "# USAGE I"
				echo "#     targets: list of targets"
				echo "#     target_<target>: target connection config (\"<host>\" \"<user>\" \"<target_dir>"
				echo "#"
				echo "# ABOUT OTHER CONFIG V"
				echo "#     you can add here other parameters, that will be available in your hooks and commands."
				echo "#"
				echo "# ABOUT VERSION C"
				echo "#     do not version-control this file."
				echo "#"
				echo "targets=($default_target)"
				echo "target_$default_target=($default_target_host $default_target_user $default_target_dir)"
			) >> "$project_parameters"

			if [[ ! -f "$project_parameters.dist" ]]; then
				cp "$project_parameters" "$project_parameters.dist"
			fi
		)
	fi

	echo "rctl was initialized for this project"
	echo "    use \`rctl .config\` to edit this project configuration"
	echo "    use \`rctl .param\` to edit this project parameters"
}

project_edit_config() {
	if ! in_project; then
		throw "$err_not_project"
	fi

	edit "$(find_project_root)/$g_project_config"
}

project_edit_parameters() {
	if ! in_project; then
		throw "$err_not_project"
	fi

	edit "$(find_project_root)/$g_project_parameters"
}

project_edit_command() {
	local command="$1"
	local command_file

	local project="$(find_project_root)"

	if ! in_project; then
		throw "$err_not_project"
	fi

	if [[ -z $command ]]; then
		throw "requires the command name"
	fi

	if [[ ! $command =~ ^[a-z_@][a-z0-9_@-]*$ ]]; then
		throw "invalid command name"
	fi

	if ! in_project; then
		throw "$err_not_project"
	fi

	command_file="$project/$g_project_commands_dir/$command.bash"

	if [[ ! -f $command_file ]]; then
		touch "$command_file"

		(
			echo '# project custom command'
			echo '#     - you can call all internal functions (see `which rctl`)'
			echo '#     - you can access all internal variables'
			echo '#     - you can access your project config'
			echo
			echo 'command_run() {'
			echo '	_'
			echo '}'
			echo
			echo 'command_usage() {'
			echo '	# parameters'
			echo '	#echo "{aaa|bbb}"'
			echo '	# details (use $_ as 1-level padding)'
			echo '	#echo "    aaa [--aaa1] -- aaa"'
			echo '	#echo "    bbb          -- bbb"'
			echo '}'
			echo
			echo 'command_autocomplete() {'
			echo '	#case "$1" in'
			echo '		#"")'
			echo '			#echo "aaa"'
			echo '			#echo "bbb"'
			echo '			#;;'
			echo '		#aaa)'
			echo '			#echo '--aaa1''
			echo '			#;;'
			echo '	#esac'
			echo '}'
		) >> $command_file
	fi

	edit "$command_file"
}

project_edit_hook() {
	#local when="$1"
	#local command="$2"
	local hook="$1"
	local command="$(echo "$hook" | awk -F: '{ print $1 }')"
	local when="$(echo "$hook" | awk -F: '{ print $2 }')"


	local project="$(find_project_root)"
	local hook_file
	local command_file

	if ! in_project; then
		throw "$err_not_project"
	fi

	if [[ $when != "before" && $when != "after" ]]; then
		throw "hook moment should be 'before' or 'after'"
	fi

	if [[ -z $command ]]; then
		throw "requires the command name"
	fi

	if [[ ! $command =~ ^[a-z_@][a-z0-9_@-]*$ ]]; then
		throw "invalid command name"
	fi

	command_file="$project/$g_project_commands_dir/$command.bash"
	if [[ $command != "push" && $command != "ssh" && ! -f $command_file ]]; then
		throw "not a valid command"
	fi

	hook_file="$project/$g_project_hooks_dir/${command}.${when}.bash"

	if [[ ! -f $hook_file ]]; then
		touch "$hook_file"

		(
			echo "# project hook: $command:$when"
			echo "#"
			echo "# you can call all rctl functions (see \`which rctl\` source code), such as:"
			echo "#     * \`project_ssh <target> [<command> [<args...>]]\`"
			echo "#     * \`project_run <custom_command>\`"
			echo "#"
			echo "# you can access and modify all variables, such as:"
			echo "#     * \`project=\"\$project\"\` # current project root path"
			if [[ $command == "push" ]]; then
				echo "#     * \`sync_include=(\"\${sync_include[@]}\")\` # files to include"
				echo "#     * \`sync_exclude=(\"\${sync_exclude[@]}\")\` # files to exclude"
				echo "#     * \`rsync_opts=\"\$rsync_opts\"\` # rsync options (for example, to target -zz for older servers)"
			fi
			if [[ $command == "ssh" ]]; then
				echo "#     * \`ssh_opts=(\"\${ssh_opts[@]}\")\` # options for ssh (default change dir, except if args not empty)"
			fi
			if [[ $command == "push" || $command == "ssh" ]]; then
				echo "#     * \`target=\"\$target\"\` # target"
				echo "#     * \`target_host=\"\$target_host\"\` # target hostname"
				echo "#     * \`target_user=\"\$target_user\"\` # target username"
				echo "#     * \`target_dir=\"\$target_dir\"\` # target directory"
				echo "#     * \`args=(\"\${args[@]}\")\` # provided command line arguments"
			fi
			echo
			echo
		) >> $hook_file
	fi

	edit "$hook_file"
}

project_push() {
	local target="$1"; shift

	if [[ -z $target ]]; then
		throw "invalid usage"
	fi

	if ! in_project; then
		throw "$err_not_project"
	fi

	if ! project_has_target "$target"; then
		throw "target '$target' is not defined (see \`$g_rctl .param\`)"
	fi

	(
		local args=("$@")
		local project="$(find_project_root)"
		local project_rctl="$project/$g_project_rctl"
		cd "$project" # required for rsync

		source "$(find_project_root)/$g_project_config"

		local target_full="target_$target"
		local target_host="$(eval echo \"\${$target_full[0]}\")"
		local target_user="$(eval echo \"\${$target_full[1]}\")"
		local target_dir="$(eval echo \"\${$target_full[2]}\")"

		local rsync=rsync
		local rsync_opts="$g_rsync_opts"

		run_global_hook_if_exists before push
		run_project_hook_if_exists before push

		local rsync_include=("${sync_include[@]}") # quote-enclosed, until the end
		local rsync_exclude=()

		for f in "${sync_exclude[@]}"; do
			rsync_exclude=("${rsync_exclude[@]}" --exclude="$f")
		done

		info "running push to $target"
		$rsync $g_rsync_opts ${rsync_exclude[@]} ${rsync_include[@]} -e ssh "${target_user}@${target_host}:${target_dir}"

		run_project_hook_if_exists after push
		run_global_hook_if_exists after push
	)
}

project_ssh() {
	local target="$1"; shift

	if [[ -z $target ]]; then
		throw "invalid usage"
	fi

	if ! in_project; then
		throw "$err_not_project"
	fi

	if ! project_has_target "$target"; then
		throw "target not defined (see \`$g_rctl .param\`)"
	fi

	(
		local args=("$@")
		local ssh_opts=()
		local project="$(find_project_root)"
		local project_rctl="$project/$g_project_rctl"
		cd "$project" # required for rsync

		source "$(find_project_root)/$g_project_config"

		local target_full="target_$target"
		local target_host="$(eval echo \"\${$target_full[0]}\")"
		local target_user="$(eval echo \"\${$target_full[1]}\")"
		local target_dir="$(eval echo \"\${$target_full[2]}\")"

		run_global_hook_if_exists before ssh
		run_project_hook_if_exists before ssh

		if [[ "${#args[@]}" -gt 0 ]]; then
			info "running ssh on $target"
		fi
		ssh "${target_user}@${target_host}" "${ssh_opts[@]}" "${args[@]}"

		run_project_hook_if_exists after ssh
		run_global_hook_if_exists after ssh
	)
}

project_run() {
	local command="$1"; shift
	local project=""
	local command_file
	local is_project_command

	if [[ ! $command =~ ^[a-z_@][a-z0-9_@-]*$ ]]; then
		throw "invalid command name"
	fi

	if ! in_project; then
		command_file="$g_main_commands_dir/${command}.bash"

		if [[ ! -f $command_file ]]; then
			throw "invalid global command"
		fi

		run_global_hook_if_exists before "$command"

		source "$command_file"
		info "running global command: $command"
		command_run
		command_exit=$?

		run_global_hook_if_exists after "$command"

		exit $command_exit
	fi

	project="$(find_project_root)"
	project_rctl="$project/$g_project_rctl"

	command_file="$project/$g_project_commands_dir/${command}.bash"
	is_project_command=true

	if [[ ! -f $command_file ]]; then
		command_file="$g_main_commands_dir/${command}.bash"
		is_project_command=false

		if [[ ! -f $command_file ]]; then
			throw "invalid command"
		fi
	fi

	(
		cd "$project"

		source "$(find_project_root)/$g_project_config"

		run_global_hook_if_exists before "$command"
		run_project_hook_if_exists before "$command"

		source "$command_file"

		if $is_project_command; then
			info "running project command: $command"
		else
			info "running global command: $command"
		fi

		command_run "$@"
		command_exit=$?

		run_project_hook_if_exists after "$command"
		run_global_hook_if_exists after "$command"

		exit $command_exit
	)
}


# autocomplete
#-------------------------------------------------------------------------------

autocomplete() {
	local arg="$1"; shift

	local main_commands="$(list_commands "$g_main_commands_dir")"
	local project="$(find_project_root "$PWD")"
	local project_rctl="$project/$g_project_rctl"
	local project_commands=""

	if in_project; then
		project_commands="$(list_commands "$project/$g_project_commands_dir")"
	fi

	case $arg in
		"")
			if ! in_project; then
				echo .help
			fi

			if [[ -n $main_commands ]]; then
				for cmd in $main_commands; do
					echo "$cmd"
				done
			fi

			if ! in_project && in_initializable_project; then
				echo init
			fi

			if in_project; then
				echo ssh
				echo push
				echo .config
				echo .param
				echo .edit-hook
				echo .edit-command
				echo .help

				if [[ -n $project_commands ]]; then
					for cmd in $project_commands; do
						echo "$cmd"
					done
				fi
			fi
			;;

		push)
			project_list_targets
			;;

		ssh)
			project_list_targets
			;;

		.help)
			for cmd in $project_commands; do
				echo "$cmd"
			done
			for cmd in $main_commands; do
				echo "$cmd"
			done
			;;

		.edit-command)
			if [[ -n $project_commands ]]; then
				for cmd in $project_commands; do
					echo "$cmd"
				done
			fi
			;;

		.edit-hook)
			if [[ -z $1 ]]; then
				for cmd in push ssh ${project_commands[@]}; do
					echo "$cmd:before"
					echo "$cmd:after"
				done
			fi
			;;

		*)
			if [[ -n $project_commands ]]; then
				for command in $project_commands; do
					if [[ $arg == $command ]]; then
						command_file="$project/$g_project_commands_dir/${command}.bash"
						source "$project/$g_project_config"
						source "$command_file"
						command_autocomplete "$@"
					fi
				done
			fi
			;;
	esac
}


# run
#-------------------------------------------------------------------------------

main() {
	rctl_setup

	local action="$1"; shift

	if ! in_project && [[ $action == ".help" ]]; then
		usage
		exit $OK
	fi

	case "$action" in
		init)
			project_init
			;;

		push)
			local target="$1"; shift
			local args=("$@")

			project_push "$target" "${args[@]}"
			;;

		ssh)
			local target="$1"; shift
			local args=("$@")

			project_ssh "$target" "${args[@]}"
			;;

		.config)
			project_edit_config
			;;

		.param)
			project_edit_parameters
			;;

		.edit-command)
			local command="$1"

			project_edit_command "$command"
			;;

		.edit-hook)
			#local when="$1"
			#local command="$2"
			#project_edit_hook "$when" "$command"
			local hook="$1"
			project_edit_hook "$hook"
			;;

		.help)
			usage "$@"
			;;

		---)
			autocomplete "$@"
			;;

		"")
			throw "please specify a command (see \`$g_rctl help\`)"
			;;

		*)
			project_run "$action" "$@"
			exit $?
			;;
	esac

	exit $OK
}

main "$@"
